#!/usr/bin/env bash
# bin/compile <build-dir> <cache-dir>

#!/bin/bash
# usage: bin/compile <build-dir> <cache-dir> <env-dir>

set -eo pipefail

mkdir -p "$1" "$2"
build=$(cd "$1/" && pwd)
cache=$(cd "$2/" && pwd)
env_dir="${3}"

buildpack=$(cd "$(dirname $0)/.." && pwd)
source "${buildpack}/lib/common.sh"

DefaultGoVersion=1.8.1

ver=${GOVERSION:-${DefaultGoVersion}}

ensureGo() {
    local goVersion="${1}"
    local goPath="${cache}/${goVersion}/go"
    local goFile=""

    if [ -d "${goPath}" ]; then
        step "Using ${goVersion}"
    else
        rm -rf ${cache}/* #For a go version change, we delete everything
        goFile="go${goVersion}.linux-amd64.tar.gz"

        step "Installing ${goVersion}"

        pushd "${cache}" &> /dev/null
            mkdir -p "${goVersion}"
            pushd "${goVersion}" &> /dev/null
                local url="https://storage.googleapis.com/golang/${goFile}"
                start "Downloading Go ${goVersion} from $url"
                    ${CURL} -O ${url}
                    local dirname=$(tar -tzf ${goFile} | head -1 | cut -f1 -d"/")
                    tar -xzf ${goFile}
                    rm ${goFile}
                finished
            popd &> /dev/null
        popd &> /dev/null
        goPath="${cache}/${goVersion}/go"
    fi

    export GOROOT="${goPath}"
    PATH="${goPath}/bin:${PATH}"
}

loadEnvDir "${env_dir}"

if [ -e "${build}/bin" -a ! -d "${build}/bin" ]; then
    err ""
    err "File bin exists and is not a directory."
    err ""
    exit 1
fi

ensureGo "${ver}"
mkdir -p "${build}/bin"

if [ -n "${src}" -a "${src}" != "${build}" -a -e "${src}/Procfile" ]; then
    mv -t "${build}" "${src}/Procfile"
fi

if [ ! -e $build/Procfile -a -n "${name}" ]; then
    echo -e "web: $(basename $name)" >> $build/Procfile
fi

cd $build
mkdir -p $build/.profile.d
echo 'PATH=$PATH:$HOME/bin' > $build/.profile.d/go.sh

setupGOPATH() {
    local name="${1}"
    local t="$(mktemp -d)"

    mv -t ${t} ${build}/*
    GOPATH="${build}"

    local src="${GOPATH}/src/${name}"
    mkdir -p "${src}"
    mkdir -p "${build}/bin"
    mv -t "${src}" "${t}"/*

    echo export GOPATH=${GOPATH}
}

if [ "${GO_INSTALL_TOOLS_IN_IMAGE}" = "true" ]; then
    start "Copying go tool chain to \$GOROOT=\$HOME/.heroku/go"
        mkdir -p "${build}/.heroku/go"
        cp -a "${GOROOT}/"* "${build}/.heroku/go"
        echo 'export GOROOT=$HOME/.heroku/go' > "${build}/.profile.d/goroot.sh"
        echo 'PATH=$PATH:$GOROOT/bin' >> "${build}/.profile.d/goroot.sh"
    finished
fi

if [ -z "${GO_INSTALL_PACKAGE_SPEC}" ]; then
    echo "Missing GO_INSTALL_PACKAGE_SPEC"
    exit 1
fi

eval "$(setupGOPATH ${GO_INSTALL_PACKAGE_SPEC})"